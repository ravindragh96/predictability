# rsm_streamlit_app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.interpolate import griddata

# ----------------------------------
# Streamlit Page Configuration
# ----------------------------------
st.set_page_config(page_title="RSM Visualization App", layout="wide")
st.title("ðŸŒ€ Response Surface Modeling (RSM) Visualization")
st.markdown("""
This app visualizes **Response Surface Models** using synthetic data generated by your trained ANN model.  
You can select any two input features as X and Y, and one output (Z) to visualize the 2D contour.
""")

# ----------------------------------
# Upload synthetic dataset
# ----------------------------------
uploaded_file = st.file_uploader("ðŸ“‚ Upload your synthetic dataset (Excel or CSV)", type=["xlsx", "csv"])

if uploaded_file is not None:
    # Load dataset
    if uploaded_file.name.endswith(".xlsx"):
        df = pd.read_excel(uploaded_file)
    else:
        df = pd.read_csv(uploaded_file)

    st.success(f"âœ… Data loaded successfully! Shape: {df.shape}")
    st.write(df.head())

    # ----------------------------------
    # Sidebar: Feature selection
    # ----------------------------------
    st.sidebar.header("ðŸ”§ Select Parameters")
    input_columns = [col for col in df.columns if not col.startswith('e')]
    output_columns = [col for col in df.columns if col.startswith('e')]

    x_feature = st.sidebar.selectbox("Select X-axis feature", input_columns, index=0)
    y_feature = st.sidebar.selectbox("Select Y-axis feature", input_columns, index=1)
    z_feature = st.sidebar.selectbox("Select Output feature (Z)", output_columns, index=0)

    grid_resolution = st.sidebar.slider("Grid resolution", 20, 150, 80)
    contour_levels = st.sidebar.slider("Contour smoothness (levels)", 10, 50, 20)

    # ----------------------------------
    # Data extraction
    # ----------------------------------
    X = df[x_feature].values
    Y = df[y_feature].values
    Z = df[z_feature].values

    # ----------------------------------
    # Create RSM Grid
    # ----------------------------------
    xi = np.linspace(X.min(), X.max(), grid_resolution)
    yi = np.linspace(Y.min(), Y.max(), grid_resolution)
    XI, YI = np.meshgrid(xi, yi)

    # Interpolate Z values
    ZI = griddata((X, Y), Z, (XI, YI), method='cubic')

    # ----------------------------------
    # Plot Contour with Data Points
    # ----------------------------------
    fig, ax = plt.subplots(figsize=(8, 6))
    contour = ax.contourf(XI, YI, ZI, levels=contour_levels, cmap='RdYlGn_r')  # red = high, green = low
    cbar = plt.colorbar(contour, ax=ax, label=z_feature)
    cbar.ax.tick_params(labelsize=10)

    # Overlay actual data points
    ax.scatter(X, Y, color='black', s=15, alpha=0.7, label='Synthetic Data Points')

    ax.set_xlabel(x_feature, fontsize=12)
    ax.set_ylabel(y_feature, fontsize=12)
    ax.set_title(f"RSM Contour: {z_feature} vs {x_feature} & {y_feature}", fontsize=14)
    ax.legend(loc="upper right")

    st.pyplot(fig)

    # ----------------------------------
    # Data Download Option
    # ----------------------------------
    st.sidebar.markdown("### ðŸ’¾ Download Filtered Data")
    sub_df = df[[x_feature, y_feature, z_feature]]
    csv = sub_df.to_csv(index=False).encode('utf-8')
    st.sidebar.download_button(
        label="Download X-Y-Z Data (CSV)",
        data=csv,
        file_name=f"RSM_{x_feature}_{y_feature}_{z_feature}.csv",
        mime='text/csv'
    )

    # ----------------------------------
    # Info Section
    # ----------------------------------
    st.info("""
    âœ… **Interpretation Tips:**
    - The color gradient shows how the ANN-predicted output varies across your chosen input range.
    - Black dots are actual synthetic data points used to generate this surface.
    - Red regions â†’ higher predicted output values  
      Green regions â†’ lower predicted output values
    """)

else:
    st.warning("ðŸ‘† Please upload your synthetic dataset to generate RSM plots.")
